# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kobuki_msgs/ControllerInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControllerInfo(genpy.Message):
  _md5sum = "46af38e72f0640f41ed22174d43a2550"
  _type = "kobuki_msgs/ControllerInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Controller info message, contains PID parameters

uint8 DEFAULT   =  0
uint8 USER_CONFIGURED =  1

uint8 type
float64 p_gain #should be positive
float64 i_gain #should be positive
float64 d_gain #should be positive
"""
  # Pseudo-constants
  DEFAULT = 0
  USER_CONFIGURED = 1

  __slots__ = ['type','p_gain','i_gain','d_gain']
  _slot_types = ['uint8','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,p_gain,i_gain,d_gain

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControllerInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.p_gain is None:
        self.p_gain = 0.
      if self.i_gain is None:
        self.i_gain = 0.
      if self.d_gain is None:
        self.d_gain = 0.
    else:
      self.type = 0
      self.p_gain = 0.
      self.i_gain = 0.
      self.d_gain = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3d().pack(_x.type, _x.p_gain, _x.i_gain, _x.d_gain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.type, _x.p_gain, _x.i_gain, _x.d_gain,) = _get_struct_B3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3d().pack(_x.type, _x.p_gain, _x.i_gain, _x.d_gain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.type, _x.p_gain, _x.i_gain, _x.d_gain,) = _get_struct_B3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3d = None
def _get_struct_B3d():
    global _struct_B3d
    if _struct_B3d is None:
        _struct_B3d = struct.Struct("<B3d")
    return _struct_B3d
